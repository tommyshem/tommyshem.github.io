<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux Notes on Tom&#39;s Things</title>
    <link>https://tommyshem.github.io/categories/linux-notes/</link>
    <description>Recent content in Linux Notes on Tom&#39;s Things</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Sat, 28 Dec 2019 21:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tommyshem.github.io/categories/linux-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Enable Sudoers</title>
      <link>https://tommyshem.github.io/2019/12/28/enable-sudoers/</link>
      <pubDate>Sat, 28 Dec 2019 21:00:00 +0000</pubDate>
      
      <guid>https://tommyshem.github.io/2019/12/28/enable-sudoers/</guid>
      <description>Arch Linux resources website https://wiki.archlinux.org/index.php/Users_and_groups
Enable sudoers Notes Settings Open settings.
visudo Uncomment the wheel group, this allows all users in the wheel group to run all commands.
%wheel ALL=(ALL) ALL Add user Add user to the wheel group, change userName to the user name you require.
useradd -m -G wheel -s /bin/bash userName Protect the user account with a password passwd userName Adding a system user useradd -r -s /usr/bin/nologin userName Changing user login names usermod -l userNewName userOldName Changing user&#39;s home dir usermod -d /new/home/dir -m userName Test if sudo works by entering the command sudo whoami If you get something like this (below), then sudo is working for the set account.</description>
    </item>
    
    <item>
      <title>How to add scripts nautilus menu</title>
      <link>https://tommyshem.github.io/2018/01/28/how-to-add-scripts-nautilus-menu/</link>
      <pubDate>Sun, 28 Jan 2018 21:00:00 +0000</pubDate>
      
      <guid>https://tommyshem.github.io/2018/01/28/how-to-add-scripts-nautilus-menu/</guid>
      <description>How to add scripts to nautilus website</description>
    </item>
    
    <item>
      <title>How to Mount a drive on linux</title>
      <link>https://tommyshem.github.io/2018/01/28/how-to-mount-a-drive-on-linux/</link>
      <pubDate>Sun, 28 Jan 2018 21:00:00 +0000</pubDate>
      
      <guid>https://tommyshem.github.io/2018/01/28/how-to-mount-a-drive-on-linux/</guid>
      <description>Mount drive Find device you want to mount
fdisk -l Make a folder that will be the mount point.
Example using data as the mount point
sudo mkdir /home/yourusernamehere/data Mount the device drive, example using /dev/sdb1. Use the one you need to mount
sudo mount /dev/sdb1 /home/yourusernamehere/data Now you can access the drive at /media/data.
Auto-mount at boot We want the drive to auto-mount at boot.
This means editing /etc/fstab.</description>
    </item>
    
    <item>
      <title>Rsync Notes</title>
      <link>https://tommyshem.github.io/1/01/01/rsync-notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tommyshem.github.io/1/01/01/rsync-notes/</guid>
      <description>Rsync Notes Understanding the output of rsync &amp;ndash;itemize-changes As you may know the rsync&#39;s &amp;ndash;delete options if misused could make severe damage.
To prevent this you can use the &amp;ndash;itemize-change and the &amp;ndash;dry-run options to figure out how the command will behave before launching the real one.
The output will be something like that:
.d..t..g... ./ .f...p.g... Something.pdf .f.....g... md5sum-2010-02-21.txt .f...p.g... prova.rb .d.....g... .metadata/ .f...p.g... .metadata/.lock .f...p.g... .metadata/.log .f...p.g... .metadata/version.ini &amp;gt;f+++++++++ Parameter_Usage.</description>
    </item>
    
  </channel>
</rss>